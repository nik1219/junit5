package org.junit.platform.reporting.open.xml;

import org.junit.platform.engine.TestExecutionResult;
import org.junit.platform.engine.reporting.ReportEntry;
import org.junit.platform.engine.support.descriptor.ClassSource;
import org.junit.platform.engine.support.descriptor.MethodSource;
import org.junit.platform.launcher.TestExecutionListener;
import org.junit.platform.launcher.TestIdentifier;
import org.junit.platform.launcher.TestPlan;
import org.opentest4j.reporting.events.api.EventReportFileWriter;
import org.opentest4j.reporting.events.api.Namespace;
import org.opentest4j.reporting.events.api.NamespaceRegistry;
import org.opentest4j.reporting.events.core.CoreFactory;
import org.opentest4j.reporting.events.java.JavaFactory;

import java.io.IOException;
import java.io.UncheckedIOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

public class OpenTestReportGeneratingListener implements TestExecutionListener {

    private final Path reportDir;
    private EventReportFileWriter eventWriter;

    public OpenTestReportGeneratingListener() {
        this(lookupReportDirFromSystemProperties());
    }

    private static Path lookupReportDirFromSystemProperties() {
        String reportDir = System.getProperty("junit.platform.reports.dir");
        return reportDir != null ? Paths.get(reportDir) : null;
    }

    public OpenTestReportGeneratingListener(Path reportDir) {
        this.reportDir = reportDir;
    }

    @Override
    public void testPlanExecutionStarted(TestPlan testPlan) {
        if (reportDir != null) {
            try {
                Files.createDirectories(reportDir);
                Map<Namespace, String> additionalNamespaces = new HashMap<>();
                additionalNamespaces.put(JavaFactory.NAMESPACE, "java");
                additionalNamespaces.put(JUnitFactory.NAMESPACE, "junit");
                Path eventsXml = reportDir.resolve("junit-platform-events-" + System.currentTimeMillis() + ".xml");
                eventWriter = new EventReportFileWriter(eventsXml, NamespaceRegistry.of(additionalNamespaces));
            } catch (Exception e) {
                throw new RuntimeException("Failed to close XML events file", e);
            }
        }
    }

    @Override
    public void testPlanExecutionFinished(TestPlan testPlan) {
        if (eventWriter != null) {
            try {
                eventWriter.close();
            } catch (IOException e) {
                throw new UncheckedIOException("Failed to close XML events file", e);
            } finally {
                eventWriter = null;
            }
        }
    }

    @Override
    public void executionStarted(TestIdentifier testIdentifier) {
        eventWriter.append(CoreFactory.started(testIdentifier.getUniqueId(), Instant.now(), testIdentifier.getDisplayName()), started -> {
            testIdentifier.getParentId().ifPresent(started::withParentId);
            started.addChild(CoreFactory.metadata(), metadata -> {
                if (!testIdentifier.getTags().isEmpty()) {
                    metadata.addChild(CoreFactory.tags(), tags -> //
                            testIdentifier.getTags().forEach(tag -> tags.addChild(CoreFactory.tag(tag.getName()))));
                }
                metadata.addChild(JUnitFactory.legacyReportingName(testIdentifier.getLegacyReportingName()));
                metadata.addChild(JUnitFactory.type(testIdentifier.getType()));
            });
            testIdentifier.getSource().ifPresent(source -> started.addChild(CoreFactory.sources(), sources -> {
                if (source instanceof ClassSource) {
                    ClassSource classSource = (ClassSource) source;
                    sources.addChild(JavaFactory.classSource(classSource.getClassName()), classSourceElement -> //
                            classSource.getPosition()
                                    .ifPresent(filePosition -> classSourceElement.addFilePosition(filePosition.getLine(), filePosition.getColumn())));
                } else if (source instanceof MethodSource) {
                    MethodSource methodSource = (MethodSource) source;
                    sources.addChild(JavaFactory.methodSource(methodSource.getClassName(), methodSource.getMethodName()), methodSourceElement -> {
                        String methodParameterTypes = methodSource.getMethodParameterTypes();
                        if (methodParameterTypes != null) {
                            methodSourceElement.withMethodParameterTypes(methodParameterTypes);
                        }
                    });
                }
            }));
        });
    }

    @Override
    public void reportingEntryPublished(TestIdentifier testIdentifier, ReportEntry entry) {
        eventWriter.append(CoreFactory.reported(testIdentifier.getUniqueId()), reported -> {
            reported.addChild(CoreFactory.attachments(), attachments -> attachments.addChild(CoreFactory.data(), data -> {
                data.withTime(entry.getTimestamp());
                entry.getKeyValuePairs().forEach(data::addEntry);
            }));
        });
    }

    @Override
    public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
        eventWriter.append(CoreFactory.finished(testIdentifier.getUniqueId(), Instant.now()));
    }
}
